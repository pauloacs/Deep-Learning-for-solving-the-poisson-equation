{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"karman_(sims,...)","provenance":[{"file_id":"1GqZu6zmCy2vMNMZqO78DDuHvwv_9vJcp","timestamp":1627417230582},{"file_id":"1IzPbxNFQmmSYk9s14L4YjBfUgACn9mW2","timestamp":1593978024316},{"file_id":"1G7NKeneJNyRtcRxLVbbF9jYtRyuTOa-R","timestamp":1592749700622},{"file_id":"https://github.com/satyajitghana/TSAI-DeepVision-EVA4.0/blob/master/Utils/Colab_25GBRAM_GPU.ipynb","timestamp":1592043804148}],"collapsed_sections":["JlS974_QNTxu"],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"4cbgwZWWfWpp"},"source":["# New Section"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tAb77yZ9fzMG","executionInfo":{"status":"ok","timestamp":1629401712142,"user_tz":-60,"elapsed":20737,"user":{"displayName":"Paulo Sousa","photoUrl":"","userId":"02594438653203148020"}},"outputId":"632151ad-2397-404d-8108-a618365156a8"},"source":["#Mount google drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"pafL7Li0jyXW","executionInfo":{"status":"ok","timestamp":1629401719564,"user_tz":-60,"elapsed":7431,"user":{"displayName":"Paulo Sousa","photoUrl":"","userId":"02594438653203148020"}}},"source":["!cp '/content/drive/MyDrive/openfoamDATA/all_data_vanKarman.hdf5' all_data.hdf5"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cavnmfz1LXu0","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"error","timestamp":1629401721282,"user_tz":-60,"elapsed":1730,"user":{"displayName":"Paulo Sousa","photoUrl":"","userId":"02594438653203148020"}},"outputId":"948a1bf9-ad30-49db-bdb3-e40025d12025"},"source":["from keras.callbacks import EarlyStopping, TensorBoard\n","import tensorflow as tf\n","import os\n","import shutil\n","import time\n","import h5py\n","import keras\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from keras.models import load_model\n","from keras.models import Model\n","from keras.layers.convolutional import ZeroPadding2D\n","from keras.layers import Input, concatenate, Conv2D, MaxPooling2D, Conv2DTranspose\n","from keras.utils.vis_utils import plot_model\n","from keras.callbacks import EarlyStopping\n","from keras.optimizers import Adam\n","import matplotlib.colors as colors"],"execution_count":5,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-67f8d9213c3e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvis_utils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplot_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mEarlyStopping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mAdam\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolors\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: cannot import name 'Adam' from 'keras.optimizers' (/usr/local/lib/python3.7/dist-packages/keras/optimizers.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"markdown","metadata":{"id":"JlS974_QNTxu"},"source":["# model"]},{"cell_type":"code","metadata":{"id":"GbqXkKeZLRTp"},"source":["def inception_module(filters=None, inputs=None):\n","    tower_0 = Conv2D(int(filters / 4), (1, 1), padding='same', activation='relu')(inputs)\n","\n","    tower_1 = Conv2D(int(filters / 4), (1, 1), padding='same', activation='relu')(inputs)\n","    tower_1 = Conv2D(int((filters * 3) / 8), (3, 3), padding='same', activation='relu')(tower_1)\n","\n","    tower_2 = Conv2D(int(filters / 8), (1, 1), padding='same', activation='relu')(inputs)\n","    tower_2 = Conv2D(int(filters / 8), (5, 5), padding='same', activation='relu')(tower_2)\n","\n","    tower_3 = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(inputs)\n","    tower_3 = Conv2D(int(filters / 4), (1, 1), padding='same', activation='relu')(tower_3)\n","\n","    concat = concatenate([tower_0, tower_1, tower_2, tower_3], axis=3)\n","\n","    return concat\n","\n","\n","def keras_model1(save_model=True):\n","    inputs = Input((50, 250, 6))  # Input(shape), return a tensor\n","    # Initial shape: (None, 50, 250, 6)\n","\n","    x = Conv2D(16, (3, 3), padding='same', activation='relu')(inputs)  # (None, 50, 250, 16)\n","    x = Conv2D(16, (3, 3), padding='same', activation='relu')(x)  # (None, 50, 250, 16)\n","\n","    c1 = inception_module(filters=32, inputs=x)  # (None, 50, 250, 32)\n","    x = inception_module(filters=32, inputs=c1)\n","    x = inception_module(filters=32, inputs=x)\n","    x = MaxPooling2D(pool_size=(2, 2))(x)  # (None, 25, 125, 32)\n","\n","    c2 = inception_module(filters=64, inputs=x)  # (None, 25, 125, 64)\n","    x = inception_module(filters=64, inputs=c2)\n","    x = inception_module(filters=64, inputs=x)\n","    x = MaxPooling2D(pool_size=(2, 2))(x)  # (None, 12, 62, 64)\n","\n","    c3 = inception_module(filters=128, inputs=x)  # (None, 12, 62, 128)\n","    x = inception_module(filters=128, inputs=c3)\n","    x = inception_module(filters=128, inputs=x)\n","    x = MaxPooling2D(pool_size=(2, 2))(x)  # (None, 6, 31, 128)\n","\n","    c4 = inception_module(filters=256, inputs=x)  # (None, 6, 31, 256)\n","    x = inception_module(filters=256, inputs=c4)\n","    x = inception_module(filters=256, inputs=x)\n","    x = MaxPooling2D(pool_size=(2, 2))(x)  # (None, 3, 15, 256)\n","\n","    x = inception_module(filters=512, inputs=x)  # (None, 3, 15, 512)\n","    x = inception_module(filters=512, inputs=x)\n","    x = inception_module(filters=512, inputs=x)  # (None, 3, 15, 512)\n","    \n","    x = concatenate(\n","        [ZeroPadding2D(((0, 0), (1, 0)))(Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(x)),\n","         c4], axis=3)  # (None, 3, 15, 512) -> (None, 6, 30, 256) -> (None, 6, 31, 256) \n","    x = inception_module(filters=256, inputs=x)\n","    x = inception_module(filters=256, inputs=x)\n","    x = inception_module(filters=256, inputs=x)\n","\n","    x = Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(x) #(None, 12, 62, 128)\n","    x = concatenate([x, c3], axis=3)  #(None, 12, 62, 256)\n","    x = inception_module(filters=128, inputs=x)\n","    x = inception_module(filters=128, inputs=x)\n","    x = inception_module(filters=128, inputs=x)\n","\n","    x = concatenate(\n","        [ZeroPadding2D(((1, 0), (1, 0)))(Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(x)),\n","         c2], axis=3)  # (None, 12, 37, 128) -> (None, 24, 74, 64) -> (None, 25, 75, 64)\n","    x = inception_module(filters=64, inputs=x)\n","    x = inception_module(filters=64, inputs=x)\n","    x = inception_module(filters=64, inputs=x)\n","\n","    x = concatenate(\n","        [Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(x),\n","         c1], axis=3)  # (None, 25, 75, 64) -> (None, 50, 150, 32)\n","\n","    x = inception_module(filters=32, inputs=x)\n","    x = inception_module(filters=32, inputs=x)\n","    x = inception_module(filters=32, inputs=x)\n","\n","    outputs = Conv2D(6, (1, 1), activation='linear')(x)\n","\n","    model = Model(inputs=[inputs], outputs=[outputs])\n","    #print(model.summary())\n","\n","\n","    plot_model(model, to_file='model_architecture_with_inception2.png', show_shapes=True, show_layer_names=False)\n","\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6cv48ZQ9NWqc"},"source":["# New Section"]},{"cell_type":"code","metadata":{"id":"0SF1Yg3ALTgP"},"source":["import math\n","def read_dataset(path=None, split=0.9, print_shape=False):\n","\n","    x = []\n","    y = []\n","    hdf5_file = h5py.File(path, \"r\")\n","    data = hdf5_file[\"sim_data\"][:, ...]\n","\n","    def gen_locations(y_cells,y,x_cells,x):\n","      locations_x = np.zeros((y_cells,x_cells))\n","      locations_y = np.zeros((y_cells,x_cells))\n","      for i in range(y_cells):\n","        locations_y[i,:] = y/y_cells * i\n","      for j in range(x_cells):\n","        locations_x[:,j] = x/x_cells * j  \n","      return locations_x, locations_y\n","      \n","    locations_x, locations_y = gen_locations(data.shape[2],1,data.shape[3],5)  \n","  \n","\n","    hdf5_file.close()\n","\n","    times_train = [i for i in range(30)]\n","    times_test = [i+1 for i in range(30)]\n","\n","    for j in range(data.shape[0]):\n","      for i in range(data.shape[1]-1):\n","        x.append(data[j, i, :,:]) \n","        y.append(data[j, i+1,:,:])\n","\n","    x = np.array(x)\n","    y = np.array(y)\n","\n","    x_ = np.zeros(shape=(x.shape[0],x.shape[1],x.shape[2],6))\n","    y_ = np.zeros(shape=(x.shape[0],x.shape[1],x.shape[2],6))\n","    x__ = np.zeros(shape=(x.shape[0],x.shape[1],x.shape[2]))\n","    y__ = np.zeros(shape=(x.shape[0],x.shape[1],x.shape[2]))\n","    t__ = np.zeros(shape=(x.shape[0],x.shape[1],x.shape[2]))\n","    \n","    for i in range(x.shape[0]):\n","      x__[i,:,:] = locations_x\n","      y__[i,:,:] = locations_y\n","      t__[i,:,:] = np.ones((x.shape[1],x.shape[2])) * (i - math.floor(i/30)*30)\n","\n","    x_[:,:,:,0] = x[:,:,:,0]\n","    x_[:,:,:,1] = x[:,:,:,1]\n","    x_[:,:,:,2] = x[:,:,:,2]\n","    x_[:,:,:,3] = x__\n","    x_[:,:,:,4] = y__\n","    x_[:,:,:,5] = t__\n","    x_ = np.array(x_)\n","\n","    for j in range(y.shape[0]):\n","      t__[j,:,:] = np.ones((x.shape[1],x.shape[2])) * ((j+1) - math.floor((j+1)/30)*30)\n","\n","    y_[:,:,:,0] = y[:,:,:,0]\n","    y_[:,:,:,1] = y[:,:,:,1]\n","    y_[:,:,:,2] = y[:,:,:,2]\n","    y_[:,:,:,3] = x__\n","    y_[:,:,:,4] = y__\n","    y_[:,:,:,5] = t__\n","    y_ = np.array(y_)\n","    \n","    \n","    total_sim = (x.shape[0])/30  #divide this way to make testing easier - x_test[0] will be the first time step of one sim\n","\n","    x_train = x_[:(int(total_sim * split)*30), ...]\n","    y_train = y_[:(int(total_sim * split)*30), ...]\n","    x_test = x_[(int(total_sim * split)*30):int(total_sim)*30, ...]\n","    y_test = y_[(int(total_sim * split)*30):int(total_sim)*30, ...]\n","    #sim_no_train = sim_no[:int(total_sim * split), ...]\n","    #sim_no_test = sim_no[int(total_sim * split):total_sim, ...]\n","\n","    if print_shape:\n","        print(\"total_sim: {}\\nx_train.shape: {}\\ny_train.shape: {}\\nx_test.shape: {}\\ny_test.shape: {}\\n\".format(\n","            total_sim,\n","            x_train.shape,\n","            y_train.shape,\n","            x_test.shape,\n","            y_test.shape))\n","\n","    return x_train, y_train, x_test, y_test\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eFrC4XoNM0eT"},"source":["hdf5_path = '/content/all_data.hdf5'\n","x_train, y_train, x_test, y_test = read_dataset(hdf5_path, split=0.9, print_shape=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G1rmw4p5FtM6"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sN86Ch-dHaBa"},"source":["x_train : (n,50,150,5)\n","\n","last collumn: 0-ux 1-uy 2-p 3-x 4-y"]},{"cell_type":"code","metadata":{"id":"tg_nlpDqFLJY"},"source":["#costum loss\n","def equations_loss(nu):\n","  def eqs_loss(y_true,y_pred):\n","    with tf.GradientTape(persistent=True) as tape:\n","      # Getting the prediction\n","      ux = y_pred[:,:,:,0].flatten()[:,None]\n","      uy = y_pred[:,:,:,1].flatten()[:,None]\n","      p = y_pred[:,:,:,2].flatten()[:,None]\n","\n","      x = y_pred[:,:,:,3].flatten()[:,None]\n","      y = y_pred[:,:,:,4].flatten()[:,None]\n","      t = y_pred[:,:,:,5].flatten()[:,None]\n","\n","\n","      # Deriving INSIDE the tape (since we’ll need the x derivative of this later, u_xx)\n","      ux_x = tape.gradient(ux, x)\n","      ux_y = tape.gradient(ux, y)\n","      \n","      uy_x = tape.gradient(uy, x)\n","      uy_y = tape.gradient(uy, y)\n","\n","\n","    # Getting the other derivatives\n","    ux_xx = tape.gradient(ux_x, x)\n","    ux_yy = tape.gradient(ux_y, y)\n","\n","    uy_xx = tape.gradient(uy_x, x)\n","    uy_yy = tape.gradient(uy_y, y)\n","\n","    ux_t = tape.gradient(ux, t)\n","    uy_t = tape.gradient(uy, t)\n","    p_x = tape.gradient(p, x)\n","    p_y = tape.gradient(p, y)\n","    \n","    residual_NS_x = ux_t + ux * ux_x + uy * ux_y + p_x - nu * (ux_xx + ux_yy)\n","    residual_NS_y = uy_t + ux * uy_x + uy * uy_y + p_y - nu * (uy_xx + uy_yy)\n","    residual_continuity = ux_x + uy_y\n","\n","    for i in range(ux.shape[0]):\n","      if (ux[i]== -1 and uy[i] == -1 and p[i] == -1):\n","        residual_NS_x[i] = 0\n","        residual_NS_y[i] = 0\n","        residual_continuity[i] = 0\n","\n","\n","    return tf.reduce_mean( tf.square(residual_continuity)) #+  tf.square(residual_NS_x) + tf.square(residual_NS_y) ) \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ELmle3glvFhQ"},"source":["#not costum training"]},{"cell_type":"code","metadata":{"id":"9rUkuSPR-nqA"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1eZvTjlBTaxy"},"source":["# New Section"]},{"cell_type":"code","metadata":{"id":"ksZuY3smbsSj"},"source":["#to search for the best lr\n","\n","lr_schedule = tf.keras.callbacks.LearningRateScheduler(\n","    lambda epoch: 1e-8 * 10**(epoch / 20))\n","optimizer = Adam(learning_rate=lr, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.45*lr, amsgrad=True)\n","\n","model= lstm_model_1()\n","\n","model.compile(loss='MSE', optimizer=optimizer, metrics=['MSE'])\n","\n","hdf5_path = '/content/all_data.hdf5'\n","\n","x_train, y_train, x_test, y_test, _, _ = read_dataset(path=hdf5_path, split=0.9, print_shape=False)\n","\n","history = model.fit(x=x_train, y=y_train, epochs=100, callbacks=[lr_schedule], verbose=1)\n","                    \n","lrs = 1e-8 * (10 ** (np.arange(100) / 20))\n","plt.semilogx(lrs, history.history[\"loss\"])\n","plt.axis([1e-8, 1e-3, 0, 8])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nn5R_AwU-U2m"},"source":["#callback to plot on the fly\n","\n","import numpy as np \n","from tensorflow import keras\n","from matplotlib import pyplot as plt\n","from IPython.display import clear_output\n","\n","class PlotLearning(keras.callbacks.Callback):\n","    \"\"\"\n","    Callback to plot the learning curves of the model during training.\n","    \"\"\"\n","    def on_train_begin(self, logs={}):\n","        self.metrics = {}\n","        for metric in logs:\n","            self.metrics[metric] = []\n","            \n","\n","    def on_epoch_end(self, epoch, logs={}):\n","        # Storing metrics\n","        for metric in logs:\n","            if metric in self.metrics:\n","                self.metrics[metric].append(logs.get(metric))\n","            else:\n","                self.metrics[metric] = [logs.get(metric)]\n","        \n","        # Plotting\n","        metrics = [x for x in logs if 'val' not in x]\n","        \n","        f, axs = plt.subplots(1, len(metrics), figsize=(15,5))\n","        clear_output(wait=True)\n","\n","        for i, metric in enumerate(metrics):\n","            axs[i].plot(range(1, epoch + 2), \n","                        self.metrics[metric], \n","                        label=metric)\n","            if logs['val_' + metric]:\n","                axs[i].plot(range(1, epoch + 2), \n","                            self.metrics['val_' + metric], \n","                            label='val_' + metric)\n","                \n","            axs[i].legend()\n","            axs[i].grid()\n","\n","        plt.tight_layout()\n","        plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7ZMmeyAs0uvR"},"source":["def mse_loss():\n","  def mse_loss_ (y_true,y_pred):\n","    loss =  tf.reduce_mean(tf.square(y_true - y_pred))\n","    return loss"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kTHy72WqTcDr"},"source":["# New Section"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"id":"uAYn5jiELiRV","executionInfo":{"status":"error","timestamp":1627462390475,"user_tz":-60,"elapsed":197944,"user":{"displayName":"Paulo Sousa","photoUrl":"","userId":"02594438653203148020"}},"outputId":"5644b37b-416d-4ba1-972a-a69e7e7c068b"},"source":["lr = 3e-04\n","model = keras_model1(x_train)\n","\n","#reconstruction_loss = tf.keras.metrics.mean_squared_error(y_true, y_pred)\n","\n","\n","model.add_loss(equations_loss(nu = 1.51e-4))\n","model.add_loss(mse_loss)\n","\n","#model.add_metric(equations_loss, name='equations_loss', aggregation='mean')\n","#model.add_metric(reconstruction_loss, name='mse_loss', aggregation='mean')\n","\n","optimizer = Adam(learning_rate=lr, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.45*lr, amsgrad=True)\n","\n","model.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['MSE'])\n","\n","\n","\n","callbacks = [EarlyStopping(monitor='val_MSE', min_delta=0.001, patience=5)]#, PlotLearning()]\n","train_info = model.fit(x=x_train, y=y_train, batch_size=32, epochs=10, verbose=1, validation_data=(x_test, y_test), callbacks=callbacks)\n","score = model.evaluate(x=x_test, y=y_test, verbose=2)\n","print('Average Mean Squared Error:', score[0])\n","model.save('my_model.h5')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n"," 9/85 [==>...........................] - ETA: 20:01 - loss: 59.2240 - MSE: 59.2240"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-f78f60c1c0d1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mcallbacks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mEarlyStopping\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmonitor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'val_MSE'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmin_delta\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.001\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpatience\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;31m#, PlotLearning()]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m \u001b[0mtrain_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Average Mean Squared Error:'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscore\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1156\u001b[0m                 _r=1):\n\u001b[1;32m   1157\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1158\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1159\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1160\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    887\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    888\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 889\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    891\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    915\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    916\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 917\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    918\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    919\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3022\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   3023\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 3024\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   3025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3026\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1959\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1960\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1961\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1962\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1963\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    594\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    595\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 596\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    597\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    598\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"-2Z9LM_E9CXA"},"source":["import os\n","import shutil\n","from keras.models import load_model\n","model = load_model('my_model.h5')\n","\n","path='/content/plots/'\n","\n","try:\n","    shutil.rmtree(path)\n","except OSError as e:\n","    print (\"\")\n","\n","os.makedirs(path)\n","\n","#x_test, y_test = read_dataset()\n","\n","predicted_flow =x_test[0,:]\n","predicted_flow = predicted_flow.reshape(1,50,250,6)\n","\n","#predicted_flow = predicted_flow.reshape(predicted_flow.shape[1:5])\n","#y_test = y_test.reshape(y_test.shape[1:5])\n","\n","for i in range(20):\n","    extent = 0, 3, 0, 1\n","    plt.suptitle('Comparision of OpenFOAM vs Deep Learning: ux', fontsize=13)\n","\n","    plt.subplot(311)\n","    plt.ylabel('OpenFOAM', fontsize=15)\n","    plt.imshow(y_test[20+i,:,:,0])\n","    maxp= np.max(y_test[20+i,:,:,0]);\n","    plt.colorbar();\n","\n","    predicted_flow = model.predict(predicted_flow)\n","\n","    plt.subplot(312)\n","    plt.ylabel('Deep Learning', fontsize=15)\n","    plt.imshow(predicted_flow[0,:,:,0],)\n","    plt.colorbar();\n","\n","    #plt.subplot(313)\n","    #plt.ylabel('ERRO Relativo', fontsize=15)\n","    #plt.imshow((y_test[20+i,:,:,2] - predicted_flow[0,:,:,2])/y_test[20+i,:,:,2])\n","    #plt.colorbar();\n","\n","\n","    plt.subplots_adjust(left=0.2, wspace=0.8, top=0.85)\n","    plt.savefig('/content/plots/' + str(i) + 'p.png')\n","    plt.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"8KZ9n5g3Ivcs","executionInfo":{"elapsed":15,"status":"ok","timestamp":1627412136449,"user":{"displayName":"Paulo Sousa","photoUrl":"","userId":"02594438653203148020"},"user_tz":-60},"outputId":"c9a97bbb-1b14-4360-af8d-16f263cd1c21"},"source":["ux = y_train[5,:,:,0].flatten()[:,None]\n","uy = y_train[5,:,:,1].flatten()[:,None]\n","p = y_train[5,:,:,2].flatten()[:,None]\n","plt.imshow(uy.reshape((50,250)))\n","plt.colorbar();\n","\n","x = y_train[1,:,:,3].flatten()[:,None]\n","y = y_train[1,:,:,4].flatten()[:,None]\n","t = y_train[1,:,:,5].flatten()[:,None]\n","\n","for i in range(ux.shape[0]):\n","  if (ux[i]== -1.0 and uy[i] == -1.0 and p[i] == -1.0):\n","    ux[i] = 0\n","    uy[i] = 0\n","    p[i] = 0\n","  if (y[i]==0 or y[i]==1):\n","    ux[i] = 10\n","    uy[i] = 10\n","    p[i] = 10\n","print(x_train[1,:,:,5])\n","plt.imshow(uy.reshape((50,250)))\n","#plt.colorbar();"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]\n"," ...\n"," [1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f04320eaed0>"]},"metadata":{"tags":[]},"execution_count":8},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}}]}]}